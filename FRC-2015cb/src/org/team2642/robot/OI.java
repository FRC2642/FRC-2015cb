package org.team2642.robot;

import org.team2642.robot.commands.Autonomous.*;
import org.team2642.robot.commands.DriveTrain.*;
import org.team2642.robot.commands.Lift.*;
import org.team2642.robot.commands.Pickers.*;

import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    public Joystick stick;
    public Joystick auxstick;
    public Joystick auxcard;


    public OI() {

        stick = new Joystick(0);
        auxstick = new Joystick(1);
        auxcard = new Joystick(2);
        
        //Lift Buttons
        Button flipper = new JoystickButton(stick, 3);
        Button manualOn = new JoystickButton(auxcard, 12);
        Button manualUp = new JoystickButton(auxstick, 3);
        Button manualDown = new JoystickButton(auxstick, 2);
        Button autoReleaseStack = new JoystickButton(auxstick, 1);
        Button dogsset = new JoystickButton(auxstick, 6);
        Button pusherset = new JoystickButton(auxstick, 7);
        
        //Lift Commands
        flipper.toggleWhenPressed(new FlipperOn());
        // Manual Lift
        /*if (manualOn.get()) {
        	manualUp.whileHeld(new MoveLiftToTop());
        	manualDown.whileHeld(new MoveLiftToBottom());
        } else {
        	// Auto Lift
        	//if (Robot.Lift.getToteInRobot()) {new AutoSetTote();}
        }*/
        
        autoReleaseStack.whenPressed(new AutoReleaseStack());
        dogsset.toggleWhenPressed(new DogsOn());
        pusherset.toggleWhenPressed(new PusherOn());
        
        
        //Picker Buttons
        Button pickerin = new JoystickButton(auxcard, 9);
        Button pickerout = new JoystickButton(auxcard, 7);
        
        //Picker Methods
        pickerin.whileHeld(new PickersIn(0.5));
        pickerout.whileHeld(new PickersOut(0.5));
        
        
        // SmartDashboard Buttons
        SmartDashboard.putData("MecanumDefault", new MecanumDefault());
        SmartDashboard.putData("FieldOrientDrive", new FieldOrientDrive());
        SmartDashboard.putData("DogsOn", new DogsOn());
        SmartDashboard.putData("FlipperOn", new FlipperOn());
        SmartDashboard.putData("PusherOn", new PusherOn());
        SmartDashboard.putData("MoveLiftToBottom", new MoveLiftToBottom());
        SmartDashboard.putData("MoveLiftToTop", new MoveLiftToTop());
        SmartDashboard.putData("AutoStack", new AutoStack());
        

    } //end OI constructor
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getStick() {
        return stick;
    }
    public double getStickX() {
    	return stick.getX();
    }
    public double getStickY() {
    	return stick.getY();
    }
    public double getStickTwist() {
    	return stick.getTwist();
    }
    
    public Joystick getAuxStick() {
    	return auxstick;
    }
    public Joystick getAuxCard() {
    	return auxcard;
    }
    
    
}


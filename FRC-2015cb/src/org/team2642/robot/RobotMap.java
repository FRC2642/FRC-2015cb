package org.team2642.robot;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.interfaces.Accelerometer;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.livewindow.LiveWindowSendable;


/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainFrontLeftMotor;
    public static SpeedController driveTrainRearLeftMotor;
    public static SpeedController driveTrainFrontRightMotor;
    public static SpeedController driveTrainRearRightMotor;
    public static PIDSpeedController driveTrainRearLeftPID;
    public static PIDSpeedController driveTrainRearRightPID;
    public static RobotDrive driveTrainrobotDrive;
   
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public static Accelerometer accel;
    public static Gyro gyro;
    public static Talon liftMotor;
    public static DigitalInput topLimit;
    public static DigitalInput bottomLimit;
    public static DigitalInput toteInRobot;
    public static DigitalInput lotOfTotes;
    public static Encoder liftEncoder;
    public static Encoder backLeftEncoder;
    public static Encoder backRightEncoder;
    
    public static Compressor compressor;
    public static Solenoid dogs;
    public static Solenoid pusher;
    public static Solenoid flipper;
    
    public static Talon leftPicker;
    public static Talon rightPicker;
    
    
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainFrontLeftMotor = new Jaguar(2);
        LiveWindow.addActuator("DriveTrain", "FrontLeftMotor", (Jaguar) driveTrainFrontLeftMotor);
        
        driveTrainRearLeftMotor = new Jaguar(3);
        LiveWindow.addActuator("DriveTrain", "RearLeftMotor", (Jaguar) driveTrainRearLeftMotor);
        
        driveTrainFrontRightMotor = new Jaguar(1);
        LiveWindow.addActuator("DriveTrain", "FrontRightMotor", (Jaguar) driveTrainFrontRightMotor);
        
        driveTrainRearRightMotor = new Jaguar(0);
        LiveWindow.addActuator("DriveTrain", "RearRightMotor", (Jaguar) driveTrainRearRightMotor);
        
        driveTrainRearLeftPID = new PIDSpeedController(backLeftEncoder, driveTrainRearLeftMotor, "Drive", "Back Left");
        LiveWindow.addActuator("DriveTrain", "RearLeftPID", (Jaguar) driveTrainRearLeftMotor);
        
        driveTrainRearRightMotor = new PIDSpeedController(backRightEncoder, driveTrainRearRightMotor, "Drive", "Back Right");
        LiveWindow.addActuator("DriveTrain", "RearRightPID", (Jaguar) driveTrainRearRightMotor);
        
        driveTrainrobotDrive = new RobotDrive(driveTrainFrontLeftMotor, driveTrainRearLeftPID,
              driveTrainFrontRightMotor, driveTrainRearRightPID);
        
        driveTrainrobotDrive.setSafetyEnabled(true);
        driveTrainrobotDrive.setExpiration(0.1);
        driveTrainrobotDrive.setSensitivity(0.3);
        driveTrainrobotDrive.setMaxOutput(1.0);
        driveTrainrobotDrive.setInvertedMotor(RobotDrive.MotorType.kFrontLeft, true);
        driveTrainrobotDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true);
        
        accel = new BuiltInAccelerometer();
        accel = new BuiltInAccelerometer(Accelerometer.Range.k4G);
        LiveWindow.addSensor("DriveTrain", "Accelerometer", (LiveWindowSendable) accel); 
        
        gyro = new Gyro(0);
        LiveWindow.addSensor("DriveTrain", "Gyro", (LiveWindowSendable) gyro); 
        
        liftMotor = new Talon(4);
        LiveWindow.addActuator("Lift", "Lift Motor", (Talon) liftMotor);
        
        topLimit = new DigitalInput(8);
        LiveWindow.addSensor("Lift", "Upper Limit Switch", topLimit);
        bottomLimit = new DigitalInput(9);
        LiveWindow.addSensor("Lift", "Lower Limit Switch", bottomLimit);
        
        toteInRobot = new DigitalInput(4);
        LiveWindow.addSensor("Lift", "Tote In Robot", toteInRobot);
        lotOfTotes = new DigitalInput(5);
        LiveWindow.addSensor("Lift", "5 Totes in Robot", lotOfTotes);
        
        liftEncoder = new Encoder(6,7);
        LiveWindow.addSensor("Lift", "Lift Encoder", liftEncoder);
        backLeftEncoder = new Encoder(2,3);
        LiveWindow.addSensor("Lift", "Back Left Encoder", backLeftEncoder);
        backRightEncoder = new Encoder(0,1);
        LiveWindow.addSensor("Lift", "Back Right Encoder", backRightEncoder);
        
        leftPicker = new Talon(5);
        LiveWindow.addActuator("Pickers", "Left Picker", (Talon) leftPicker);
        rightPicker = new Talon(6);
        LiveWindow.addActuator("Pickers", "Right Picker", (Talon) rightPicker);
        
        compressor = new Compressor(0);
        LiveWindow.addActuator("Lift", "Compressor", compressor);
        dogs = new Solenoid(0);
        LiveWindow.addActuator("Lift", "Dogs", dogs);
        pusher = new Solenoid(1);
        LiveWindow.addActuator("Lift", "Pusher", pusher);
        flipper = new Solenoid(2);
        LiveWindow.addActuator("Lift", "Flipper", flipper);
        
        
    }
}
